(provide 'org_config)

(use-package org
  :ensure org-plus-contrib)


(setq org-html-validation-link nil)
(add-hook 'org-mode-hook 'flyspell-mode)
(setq org-log-done 'time)
;; org-model keybinding
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
;; (global-set-key "\C-cb" 'org-iswitchb)
;; clock task

;; (setq org-clock-persist 'history)
;; (org-clock-persistence-insinuate)

(defun open-mytodo ()
  (interactive)
  (find-file "~/Dropbox/org/mytodo.org")
  (end-of-buffer)
  )

(defun open-work ()
  (interactive)
  (find-file "~/Dropbox/org/work.org")
  ;;(end-of-buffer)
  )

(defun open-personal ()
  (interactive)
  (find-file "~/Dropbox/org/personal.org")
  ;;(end-of-buffer)
  )

(defun open-notes ()
  (interactive)
  (find-file "~/Dropbox/org/notes.org")
  ;;(end-of-buffer)
  )

(defun open-english ()
  (interactive)
  (find-file "~/Dropbox/org/english_learning.org")
  ;;(end-of-buffer)
  )

(defun open-log ()
  (interactive)
  (find-file "~/Dropbox/org/log.org")
  ;;(end-of-buffer)
  )

(setq org-agenda-files (quote ("~/Dropbox/org/work.org" "~/Dropbox/org/personal.org" "~/Dropbox/org/log.org")))

;; Babel config
(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("C" "clojure" "sh"))))

(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
;; coding in org
(org-babel-do-load-languages
 'org-babel-load-languages
 '( (perl . t)
    (ruby . t)
    (shell . t)
    (python . t)
    (emacs-lisp . t)
    (matlab . t)
    (C . t)))

;; ;; org reveal
;; ;; find more theme under site-lisp/reveal.js-master/css/theme
;; ;; (add-to-list 'load-path "~/Dropbox/emacs/site-lisp/org-reveal")
;; (require 'ox-reveal)
;; (setq org-reveal-root "file:///home/cgliu/Dropbox/emacs/site-lisp/reveal.js-master")
;; (setq org-reveal-mathjax t)

;; (cond ((eq system-type 'windows-nt) (load-library "ntemacs-cygwin"))
;;       ((eq system-type 'gnu/linux) (load-library "linux"))
;;       (t (load-library "default")))
;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) http://stackoverflow.com/a/8836108/789593
(cond ((eq system-type 'gnu/linux)
       (add-hook 'org-mode-hook
		 '(lambda ()
		    (delete '("\\.pdf\\'" . default) org-file-apps)
		    (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s")))))
      )

(setq org-agenda-custom-commands
      '(
        ("X" agenda "" nil ("~/Dropbox/emacs/org/agenda.html" ))
        ("Y" alltodo "" nil ("~/Dropbox/emacs/org/todo.html" ))
        ;; 	("h" "Agenda and Home-related tasks"
        ;; 	 ((agenda "")
        ;; 	  (tags-todo "home")
        ;; 	  (tags "garden"))
        ;; 	 nil
        ;; 	 ("~/org/home.html"))
        ;; 	("o" "Agenda and Office-related tasks"
        ;; 	 ((agenda)
        ;; 	  (tags-todo "work")
        ;; 	  (tags "office"))
        ;; 	 nil
        ;; 	 ("~/org/office.html" ))
        ))

(setq org-remember-templates
      '(
        ("Notes" ?n "** %^{Title} %U %^g\n%?" "~/GTD/notes.org" "Notes")
        ("words" ?w "** %^{New Word} %u\n%? %&" "~/org/Source/Notes/english_learning.org" "Words")
        ("sentence"?s "** %?" "~/org/Source/Notes/english_learning.org" "Sentences")
        ("Todo" ?t "** TODO %^{Brief Description} %^g\nAdded: %U\n%?"
         "~/GTD/newgtd.org" "Tasks")
        ("Daily Track"  ?k "** %U\n%?%&" "~/GTD/journal.org" "Daily Track")
        ("Daily Review" ?r "** %t \n%[~/.daily_review.txt]\n"
         "~/GTD/journal.org" "Daily Review")
        ))

;; inline LaTex formula
(setq org-export-with-LaTeX-fragments nil)

;; my function
;; sandbox
;; (defun org-mode-reftex-setup ()
;;   (load-library "reftex")
;;   (and (buffer-file-name)
;;        (file-exists-p (buffer-file-name))
;;        (reftex-parse-all))
;;   (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
;;   )
;; (add-hook 'org-mode-hook 'org-mode-reftex-setup)
;; (setq org-agenda-files (quote ("~/org/work.org" "~/org/mytodo.org" "~/org/job.org" "e:/SJTU/todo.org")))

;;see detail in org-html.org: org-export-html-postamble-format
(setq org-export-html-postamble "
<p class=\"Email\">Email: %e</p>
<p class=\"Last Modified\">Last modified %d using %c</p>
")

;; (setq org-export-html-postamble
;;       "<p class=\"author\">Author: %a (%e)</p>\t<p class=\"date\">Date: %d</p>\t<p class=\"creator\">Generated by %c</p>\n")
